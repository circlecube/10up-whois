{"version":3,"sources":["10up-logo.svg","components/PersonCard.js","components/Score.js","components/Quiz.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PersonCard","state","clicked","clickPerson","setState","setTimeout","this","props","clickCallback","correct","bind","className","onClick","data-clicked","data-correct","src","post","image","alt","name","title","Component","Score","calculateScore","Math","floor","total","record","map","r","i","key","React","Quiz","questionID","questionAnswers","correctlyAnswered","quizLimit","score","makeQuizQuestion","randomAnswer","getUnansweredPerson","posts","randomAnswerChoices","randomPeople","people","randomIndex","random","length","includes","randomUniqueNumbers","max","arr","initlength","indexOf","push","correctAnswer","randomIndexes","console","log","shuffle","array","temporaryValue","currentIndex","handleCardClick","concat","id","index","scrapeTeam","a","axios","get","html","cheerio","load","data","$","team","each","elem","find","attr","text","replace","group","bio","App","isLoading","isQuiz","beginQuiz","logo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.81f198b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/10up-logo.a5fccafa.svg\";","import React, { Component } from 'react'\n\nexport default class PersonCard extends Component {\n\tstate = {\n\t\tclicked: false,\n\t};\n\n\tclickPerson = () => {\n\n\t\tthis.setState({\n\t\t\tclicked: true,\n\t\t});\n\n\t\tsetTimeout(\n\t\t\tfunction() { \n\t\t\t\tthis.props.clickCallback( this.props.correct ); \n\t\t\t}.bind(this), \n\t\t\t500\n\t\t);\n\t\t\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<li\n\t\t\t\tclassName=\"person-card\"\n\t\t\t\tonClick={ this.clickPerson }\n\t\t\t\tdata-clicked={ this.state.clicked }\n\t\t\t\tdata-correct={ this.props.correct }\n\t\t\t>\n\t\t\t\t<img \n\t\t\t\t\tsrc={ this.props.post.image } \n\t\t\t\t\talt={ this.props.post.name } \n\t\t\t\t/>\n\t\t\t\t<p className=\"detail\">\n\t\t\t\t\t<span className=\"person-name\">{ this.props.post.name }</span>\n\t\t\t\t\t<span className=\"person-title\">{ this.props.post.title }</span>\n\t\t\t\t</p>\n\t\t\t</li>\n\t\t)\n\t}\n}","import React from 'react'\n\nexport default class Score extends React.Component {\n\t\n\tcalculateScore = () => {\n\t\treturn Math.floor( this.props.correct / this.props.total * 100 );\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"score\">\n\t\t\t\t<div className=\"label average\">\n\t\t\t\t\t{ this.calculateScore() }\n\t\t\t\t</div>\n\t\t\t\t<div className=\"label total\">\n\t\t\t\t\t{ this.props.correct + ' / ' + this.props.total }\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\tthis.props.record.map( (r, i) => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"record\"\n\t\t\t\t\t\t\t\tdata-correct={r}\n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}","import React, { Component } from 'react'\nimport PersonCard from './PersonCard';\nimport Score from './Score';\n\nexport default class Quiz extends Component {\n\tstate = {\n\t\tquestionID: 0, // current correct answer - post index\n\t\tquestionAnswers: [], // current questions answers\n\t\tcorrectlyAnswered: [], // track correct answers\n\t\tquizLimit: 10, // number of questions\n\t\tscore: {\n\t\t\tcorrect: 0, // number correct\n\t\t\ttotal: 0 // out of total clicks\n\t\t},\n\t\trecord: [], // keep track of every click - a boolean indicating the click was correct or incorrect.\n\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.makeQuizQuestion();\n\t}\n\n\tmakeQuizQuestion = () => {\n\t\tconst randomAnswer = this.getUnansweredPerson( this.props.posts );\n\t\tconst randomAnswerChoices = this.randomPeople( this.props.posts, randomAnswer);\n\n\t\tthis.setState(() => ({\n\t\t\tquestionID: randomAnswer,\n\t\t\tquestionAnswers: randomAnswerChoices,\n\t\t}));\n\t\t// console.log( this.state );\n\t}\n\n\t/**\n\t * Get a new person for a quiz question\n\t */\n\tgetUnansweredPerson = (people) => {\n\t\tlet randomIndex = Math.floor(Math.random() * people.length);\n\t\t// check if randomIndex is already included in the correctlyAnswered array\n\t\tif ( !this.state.correctlyAnswered.includes(randomIndex) ){\n\t\t\t// unique found, return it\n\t\t\t// console.log( 'unique random found: ', randomIndex, this.state.correctlyAnswered);\n\t\t\treturn randomIndex;\n\t\t} else {\n\t\t\t// found duplicate, go again - recursively\n\t\t\treturn this.getUnansweredPerson(people);\n\t\t}\n\t}\n\n\t/**\n\t * Get multiple random numbers\n\t * max = highest possible number: (0 - max)\n\t * length = number of random numbers - returned as array\n\t * arr = initial array\n\t */\n\trandomUniqueNumbers = (max, length, arr = []) => {\n\t\tconst initlength = arr.length;\n\t\tlength += initlength;\n\t\twhile(arr.length < length){\n\t\t\tvar r = Math.floor(Math.random() * max);\n\t\t\t// ensure value is unique\n\t\t\twhile ( arr.includes(r) ) {\n\t\t\t\tr = Math.floor(Math.random() * max);\n\t\t\t}\n\t\t\tif(arr.indexOf(r) === -1) arr.push(r);\n\t\t}\n\t\treturn arr;\n\t}\n\n\trandomPeople = (posts, correctAnswer) => {\n\t\tif ( posts ) {\n\t\t\tlet randomIndexes = [correctAnswer];\n\t\t\tlet randomPeople = [];\n\t\t\trandomIndexes = this.randomUniqueNumbers(posts.length, 3, randomIndexes);\n\t\t\tconsole.log(randomIndexes);\n\t\t\t// three random people\n\t\t\trandomPeople.push(posts[randomIndexes[0]]);\n\t\t\trandomPeople.push(posts[randomIndexes[1]]);\n\t\t\trandomPeople.push(posts[randomIndexes[2]]);\n\t\t\trandomPeople.push(posts[randomIndexes[3]]);\n\t\t\t// retunr the shuffles answers\n\t\t\treturn this.shuffle(randomPeople);\n\t\t}\n\t}\n\n\tshuffle = (array) => {\n\t\tlet currentIndex = array.length;\n\t\tlet temporaryValue, randomIndex;\n\t  \n\t\t// While there remain elements to shuffle...\n\t\twhile (0 !== currentIndex) {\n\t  \n\t\t  // Pick a remaining element...\n\t\t  randomIndex = Math.floor(Math.random() * currentIndex);\n\t\t  currentIndex -= 1;\n\t  \n\t\t  // And swap it with the current element.\n\t\t  temporaryValue = array[currentIndex];\n\t\t  array[currentIndex] = array[randomIndex];\n\t\t  array[randomIndex] = temporaryValue;\n\t\t}  \n\t\treturn array;\n\t}\n\n\thandleCardClick = (correct) => {\n\t\tthis.setState((state) => ({\n\t\t\tscore: {\n\t\t\t\tcorrect: state.score.correct + correct, // increment correct - if correct\n\t\t\t\ttotal: state.score.total + 1, // increment total for every click\n\t\t\t},\n\t\t\trecord: state.record.concat( correct ),\n\t\t}));\n\t\tif ( correct ) {\n\t\t\tthis.setState((state) => ({\n\t\t\t\tcorrectlyAnswered: state.correctlyAnswered.concat( state.questionID ),\n\t\t\t}));\n\t\t\tthis.makeQuizQuestion();\n\t\t}\n\t}\n\n\trender (){\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<p>\n\t\t\t\t\t{ this.state.questionAnswers && this.state.questionID && \n\t\t`Who is ${ this.props.posts[this.state.questionID].name }?`\t\n\t\t\t\t\t}\n\t\t\t\t</p>\n\t\t\t\t<ul className=\"people-list -quiz\">\n\t\t\t\t{\n\t\t\t\t\tthis.state.questionAnswers.map( (post, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<PersonCard \n\t\t\t\t\t\t\t\tpost={ post }\n\t\t\t\t\t\t\t\tkey={ post.id }\n\t\t\t\t\t\t\t\tindex={ i }\n\t\t\t\t\t\t\t\tcorrect={ post.id === this.state.questionID }\n\t\t\t\t\t\t\t\tclickCallback={ this.handleCardClick }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t</ul>\n\n\t\t\t\t{/* <button onClick={this.makeQuizQuestion}>Skip</button> */}\n\t\t\t\t\n\t\t\t\t<Score\n\t\t\t\t\trecord={this.state.record}\n\t\t\t\t\ttotal={this.state.score.total}\n\t\t\t\t\tcorrect={this.state.score.correct}\n\t\t\t\t/>\n\n\t\t\t</>\n\t\t)\n\t}\n}","import axios from 'axios';\nimport cheerio from 'cheerio';\n\nexport default async function scrapeTeam() {\n\tconst html = await axios.get('https://cors-anywhere.herokuapp.com/https://10up.com/about/');\n\tconst $ = await cheerio.load(html.data);\n\tlet team = [];\n  \n\t$('#team .team-member').each((i, elem) => {\n\t\tteam.push({\n\t\t  image: $(elem).find('.avatar.photo').attr('data-src'),\n\t\t  name: $(elem).find('.meta h3').text().replace(/\\u00a0/g, \" \"),\n\t\t  title: $(elem).find('.meta p').text(),\n\t\t  group: $(elem).attr('class').replace('team-member team-', ''),\n\t\t  bio: $(elem).find('.employee-bio > p').text(),\n\t\t  id: i,\n\t\t})\n\t});\n  \n\t// console.log(team);\n\treturn team;\n  }","import React from 'react';\n\nimport Quiz from './components/Quiz';\nimport PersonCard from './components/PersonCard';\nimport scrapeTeam from './utils/API';\nimport logo from './10up-logo.svg';\nimport './App.css';\n\n/**\n * TODO\n * \n * Make score as component with visual track\n * Make quiz layout 2x2\n * Extract groups and have a quiz per group - different button per group?\n * Add timer for quiz duration\n * Add high scores?\n * \n * TOFIX\n * Bug when person repeats on next question and clicked val persists\n * \n */\nexport default class App extends React.Component {\n\tstate = {\n\t\tisLoading: true,\n\t\tteam: null,\n\t\tisQuiz: false,\n\t};\n\n\tbeginQuiz = () => {\n\t\tthis.setState({ \n\t\t\tisQuiz: true,\n\t\t});\n\t}\n\n\n\n\thandleCardClick = (correct) => {\n\t\treturn correct;\n\t}\n\n\trender() {\n\t\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n\t\t\t\t\t{ this.state.isLoading && \n\t\t\t\t\t\t<p>Loading...</p>\n\t\t\t\t\t}\n\n\t\t\t\t\t{ this.state.team && !this.state.isQuiz && \t\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<p>Who are these people?</p>\n\t\t\t\t\t\t\t<ul className=\"people-list -mini\">\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.state.team.map( post => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<PersonCard \n\t\t\t\t\t\t\t\t\t\t\tpost={ post }\n\t\t\t\t\t\t\t\t\t\t\tkey={ post.id }\n\t\t\t\t\t\t\t\t\t\t\tclickCallback={ this.handleCardClick }\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</ul> \n\t\t\t\t\t\t\t<button onClick={this.beginQuiz}>\n\t\t\t\t\t\t\t\tBegin Quiz\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</>\n\t\t\t\t\t}\n\n\t\t\t\t\t{ this.state.isQuiz &&\n\t\t\t\t\t\t<Quiz \n\t\t\t\t\t\t\tposts={this.state.team}\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tasync componentDidMount() {\n\t\t// load async data\n\t\tlet team = await scrapeTeam();\n\t\t// update state with new data\n\t\t// console.log(request.data);\n\t\tthis.setState({\n\t\t\tteam: team,\n\t\t\tisLoading: false,\n\t\t});\n\t\t// rerender app\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}