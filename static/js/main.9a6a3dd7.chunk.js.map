{"version":3,"sources":["10up-logo.svg","components/PersonCard.js","components/Score.js","components/Quiz.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PersonCard","state","clicked","clickPerson","setState","setTimeout","this","props","clickCallback","correct","bind","className","onClick","data-clicked","data-correct","src","person","image","alt","name","title","Component","Score","average","total","record","map","r","i","key","React","Quiz","questionID","questionIndex","questionAnswers","correctlyAnswered","quizLimit","score","makeQuizQuestion","length","team","endCallback","randomAnswerIndex","getUnansweredPerson","randomAnswerID","id","randomAnswerChoices","randomPeople","people","randomIndex","Math","floor","random","includes","randomUniqueNumbers","max","arr","initlength","indexOf","push","correctAnswer","randomIndexes","shuffle","array","temporaryValue","currentIndex","calculateScore","handleCardClick","scorecorrect","scoretotal","scoreaverage","concat","index","scrapeTeam","a","axios","get","html","cheerio","load","data","$","each","elem","find","attr","text","replace","group","bio","App","isLoading","groups","selectedTeam","isQuiz","testing","beginQuiz","endQuiz","message","alert","setGroups","Set","o","filter","sort","b","handleTeamChange","event","target","value","logo","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9a6a3dd7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/10up-logo.a5fccafa.svg\";","import React, { Component } from 'react'\n\nexport default class PersonCard extends Component {\n\tstate = {\n\t\tclicked: false,\n\t};\n\n\tclickPerson = () => {\n\n\t\tthis.setState({\n\t\t\tclicked: true,\n\t\t});\n\n\t\tsetTimeout(\n\t\t\tfunction() { \n\t\t\t\tthis.props.clickCallback( this.props.correct ); \n\t\t\t}.bind(this), \n\t\t\t500\n\t\t);\n\t\t\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<li\n\t\t\t\tclassName=\"person-card\"\n\t\t\t\tonClick={ this.clickPerson }\n\t\t\t\tdata-clicked={ this.state.clicked }\n\t\t\t\tdata-correct={ this.props.correct }\n\t\t\t>\n\t\t\t\t<img \n\t\t\t\t\tsrc={ this.props.person.image } \n\t\t\t\t\talt={ this.props.person.name } \n\t\t\t\t/>\n\t\t\t\t<p className=\"detail\">\n\t\t\t\t\t<span className=\"person-name\">{ this.props.person.name }</span>\n\t\t\t\t\t<span className=\"person-title\">{ this.props.person.title }</span>\n\t\t\t\t</p>\n\t\t\t</li>\n\t\t)\n\t}\n}","import React from 'react'\n\nexport default class Score extends React.Component {\n\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"score\">\n\t\t\t\t<div className=\"label average\">\n\t\t\t\t\t{ this.props.average }\n\t\t\t\t</div>\n\t\t\t\t<div className=\"label total\">\n\t\t\t\t\t{ this.props.correct + ' / ' + this.props.total }\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\tthis.props.record.map( (r, i) => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"record\"\n\t\t\t\t\t\t\t\tdata-correct={r}\n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}","import React, { Component } from 'react'\nimport PersonCard from './PersonCard';\nimport Score from './Score';\n\nexport default class Quiz extends Component {\n\tstate = {\n\t\tquestionID: 0, // current correct answer - post id\n\t\tquestionIndex: 0, // current correct answer - post array index\n\t\tquestionAnswers: [], // current questions answers\n\t\tcorrectlyAnswered: [], // track correct answers\n\t\tquizLimit: 10, // number of questions\n\t\tscore: {\n\t\t\tcorrect: 0, // number correct\n\t\t\ttotal: 0, // out of total clicks\n\t\t\taverage: 0, // average score\n\t\t},\n\t\trecord: [], // keep track of every click - a boolean indicating the click was correct or incorrect.\n\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.makeQuizQuestion();\n\t}\n\n\tmakeQuizQuestion = () => {\n\t\t// check if there are any unanswered left - if not signal quiz end \n\t\tif ( this.state.correctlyAnswered.length >= this.props.team.length ) {\n\t\t\tthis.props.endCallback( this.state.score );\n\t\t\treturn;\n\t\t}\n\n\t\tconst randomAnswerIndex = this.getUnansweredPerson( this.props.team );\n\t\tconst randomAnswerID = this.props.team[randomAnswerIndex].id;\n\t\tconst randomAnswerChoices = this.randomPeople( this.props.team, randomAnswerIndex);\n\n\t\tthis.setState(() => ({\n\t\t\tquestionID: randomAnswerID,\n\t\t\tquestionIndex: randomAnswerIndex,\n\t\t\tquestionAnswers: randomAnswerChoices,\n\t\t}));\n\t\t// console.log( this.state );\n\t}\n\n\t/**\n\t * Get a new person for a quiz question\n\t */\n\tgetUnansweredPerson = (people) => {\n\t\tlet randomIndex = Math.floor(Math.random() * people.length);\n\n\t\t// check if randomIndex is already included in the correctlyAnswered array\n\t\tif ( !this.state.correctlyAnswered.includes(randomIndex) ){\n\t\t\t// unique found, return it\n\t\t\t// console.log( 'unique random found: ', randomIndex, this.state.correctlyAnswered);\n\t\t\treturn randomIndex;\n\t\t} else {\n\t\t\t// found duplicate, go again - recursively\n\t\t\treturn this.getUnansweredPerson(people);\n\t\t}\n\t}\n\n\t/**\n\t * Get multiple random numbers\n\t * max = highest possible number: (0 - max)\n\t * length = number of random numbers - returned as array\n\t * arr = initial array\n\t */\n\trandomUniqueNumbers = (max, length, arr = []) => {\n\t\tconst initlength = arr.length;\n\t\tlength += initlength;\n\t\twhile(arr.length < length){\n\t\t\tvar r = Math.floor(Math.random() * max);\n\t\t\t// ensure value is unique\n\t\t\twhile ( arr.includes(r) ) {\n\t\t\t\tr = Math.floor(Math.random() * max);\n\t\t\t}\n\t\t\tif(arr.indexOf(r) === -1) arr.push(r);\n\t\t}\n\t\treturn arr;\n\t}\n\n\trandomPeople = (team, correctAnswer) => {\n\t\tif ( team ) {\n\t\t\tlet randomIndexes = [correctAnswer];\n\t\t\tlet randomPeople = [];\n\t\t\trandomIndexes = this.randomUniqueNumbers(team.length, 3, randomIndexes);\n\t\t\t// three random people\n\t\t\trandomPeople.push(team[randomIndexes[0]]);\n\t\t\trandomPeople.push(team[randomIndexes[1]]);\n\t\t\trandomPeople.push(team[randomIndexes[2]]);\n\t\t\trandomPeople.push(team[randomIndexes[3]]);\n\t\t\t// retunr the shuffles answers\n\t\t\treturn this.shuffle(randomPeople);\n\t\t}\n\t}\n\n\tshuffle = (array) => {\n\t\tlet currentIndex = array.length;\n\t\tlet temporaryValue, randomIndex;\n\t  \n\t\t// While there remain elements to shuffle...\n\t\twhile (0 !== currentIndex) {\n\t  \n\t\t  // Pick a remaining element...\n\t\t  randomIndex = Math.floor(Math.random() * currentIndex);\n\t\t  currentIndex -= 1;\n\t  \n\t\t  // And swap it with the current element.\n\t\t  temporaryValue = array[currentIndex];\n\t\t  array[currentIndex] = array[randomIndex];\n\t\t  array[randomIndex] = temporaryValue;\n\t\t}  \n\t\treturn array;\n\t}\n\n\tcalculateScore = (correct,total) => {\n\t\treturn Math.floor( correct / total * 100 );\n\t}\n\n\thandleCardClick = (correct) => {\n\t\t // increment correct - if correct\n\t\tlet scorecorrect = this.state.score.correct + correct;\n\t\t// increment total for every click\n\t\tlet scoretotal = this.state.score.total + 1;\n\t\t// calculate average\n\t\tlet scoreaverage = this.calculateScore(scorecorrect, scoretotal);\n\t\tthis.setState((state) => ({\n\t\t\tscore: {\n\t\t\t\tcorrect: scorecorrect,\n\t\t\t\ttotal: scoretotal, \n\t\t\t\taverage: scoreaverage\n\t\t\t},\n\t\t\trecord: state.record.concat( correct ),\n\t\t}));\n\t\tif ( correct ) {\n\t\t\tthis.setState((state) => ({\n\t\t\t\tcorrectlyAnswered: state.correctlyAnswered.concat( state.questionIndex ),\n\t\t\t}));\n\t\t\tthis.makeQuizQuestion();\n\t\t}\n\t}\n\n\trender (){\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<p>\n\t\t\t\t\t{ this.state.questionAnswers && \n\t\t\t\t\t\t`Who is ${ this.props.team[this.state.questionIndex].name }?`\t\n\t\t\t\t\t}\n\t\t\t\t</p>\n\t\t\t\t<ul className=\"people-list -quiz\">\n\t\t\t\t{\n\t\t\t\t\tthis.state.questionAnswers.map( (person, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<PersonCard \n\t\t\t\t\t\t\t\tperson={ person }\n\t\t\t\t\t\t\t\tkey={ person.id }\n\t\t\t\t\t\t\t\tindex={ i }\n\t\t\t\t\t\t\t\tcorrect={ person.id === this.state.questionID }\n\t\t\t\t\t\t\t\tclickCallback={ this.handleCardClick }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t</ul>\n\n\t\t\t\t{/* <button onClick={this.makeQuizQuestion}>Skip</button> */}\n\n\t\t\t\t{ this.state.record.length > 0 &&\n\t\t\t\t\t<Score\n\t\t\t\t\t\trecord={this.state.record}\n\t\t\t\t\t\ttotal={this.state.score.total}\n\t\t\t\t\t\tcorrect={this.state.score.correct}\n\t\t\t\t\t\taverage={this.state.score.average}\n\t\t\t\t\t/>\n\t\t\t\t}\n\n\t\t\t</>\n\t\t)\n\t}\n}","import axios from 'axios';\nimport cheerio from 'cheerio';\n\nexport default async function scrapeTeam() {\n\tconst html = await axios.get('https://cors-anywhere.herokuapp.com/https://10up.com/about/');\n\tconst $ = await cheerio.load(html.data);\n\tlet team = [];\n  \n\t$('#team .team-member').each((i, elem) => {\n\t\tteam.push({\n\t\t  image: $(elem).find('.avatar.photo').attr('data-src'),\n\t\t  name: $(elem).find('.meta h3').text().replace(/\\u00a0/g, \" \"),\n\t\t  title: $(elem).find('.meta p').text(),\n\t\t  group: $(elem).attr('class').replace('team-member team-', '').replace('team-member ', ''),\n\t\t  bio: $(elem).find('.employee-bio > p').text(),\n\t\t  id: i,\n\t\t})\n\t});\n  \n\t// console.log(team);\n\treturn team;\n  }","import React from 'react';\n\nimport Quiz from './components/Quiz';\nimport PersonCard from './components/PersonCard';\nimport scrapeTeam from './utils/API';\nimport logo from './10up-logo.svg';\nimport './App.css';\n\n/**\n * TODO\n * Add options to quiz: \n * \t\tsubject: name, title, pod, \n * \t\tteam: exec, eng, design, \n * Add timer for quiz duration\n * Add high scores?\n * \n * TOFIX\n * Bug when person repeats on next question and clicked val persists\n * Bug you can click the same person multiple times and it affects your score\n */\nexport default class App extends React.Component {\n\tstate = {\n\t\tisLoading: true,\n\t\tteam: null,\n\t\tgroups: [],\n\t\tselectedTeam: null,\n\t\tisQuiz: false,\n\t\ttesting: true,\n\t};\n\n\tbeginQuiz = () => {\n\t\tthis.setState({ \n\t\t\tisQuiz: true,\n\t\t});\n\t}\n\n\tendQuiz = (score) => {\n\t\tthis.setState({ \n\t\t\tisQuiz: false,\n\t\t});\n\n\t\tconst message = `\nCongratulations! You finished the quiz!\nYou scored ${score.average}% (${score.correct} of ${score.total})!\n\nTry again or try a different quiz!\n`\n\t\talert(message);\n\t\t\n\t}\n\n\tsetGroups = (team) => {\n\t\t// parse unique group names\n\t\tlet groupnames = [...new Set(team.map(person => person.group))];\n\t\t// construct groups from names\n\t\tlet groups = groupnames.map(group => {\n\t\t\tlet o = {};\n\t\t\tif ( group === '') { // override for all\n\t\t\t\to.title = 'All';\n\t\t\t\to.team = team;\n\t\t\t} else {\n\t\t\t\to.title = group;\n\t\t\t\to.team = team.filter((person) => person.group === group );\n\t\t\t}\n\t\t\treturn o;\n\t\t});\n\t\tgroups.sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0)); \n\n\t\tif( this.state.testing) {\n\t\tgroups.push({\n\t\t\ttitle: \"Test *van\",\n\t\t\tteam: team.filter((person) => person.name.includes(\"van\"))\n\t\t});\n\t}\n\t\t// console.log(groups);\n\t\tthis.setState({\n\t\t\tgroups: groups,\n\t\t\tselectedTeam: groups.find(o => o.title === 'All' ),\n\t\t});\n\t}\n\n\thandleCardClick = (correct) => {\n\t\t// do nothing so cards have a click to display name\n\t\treturn correct;\n\t}\n\n\thandleTeamChange = (event) => {\n\t\tthis.setState({ \n\t\t\tselectedTeam: this.state.groups.find(o => o.title === event.target.value ),\n\t\t});\n\t}\n\n\tasync componentDidMount() {\n\t\t// load async data\n\t\tlet team = await scrapeTeam();\n\n\t\t// set groups from team data\n\t\t// read team groups values and filter team into sub groups\n\t\t// create buttons for each group\n\t\tthis.setGroups(team);\n\n\t\t// update state with new data\n\t\tthis.setState({\n\t\t\tteam: team,\n\t\t});\n\t\t\n\t\t// rerender app\n\t\tthis.setState({\n\t\t\tisLoading: false,\n\t\t});\n\t}\n\n\trender() {\n\t\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n\t\t\t\t\t{ this.state.isLoading && \n\t\t\t\t\t\t<p>Loading...</p>\n\t\t\t\t\t}\n\n\t\t\t\t\t{ this.state.team && !this.state.isQuiz && \t\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<p>Who are these people?</p>\n\t\t\t\t\t\t\t<ul className=\"people-list -mini\">\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.state.team.map( person => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<PersonCard \n\t\t\t\t\t\t\t\t\t\t\tperson={ person }\n\t\t\t\t\t\t\t\t\t\t\tkey={ person.id }\n\t\t\t\t\t\t\t\t\t\t\tclickCallback={ this.handleCardClick }\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t\t\t<select \n\t\t\t\t\t\t\t\tvalue={this.state.selectedTeam.title}\n\t\t\t\t\t\t\t\tonChange={this.handleTeamChange}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.state.groups.map( group => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\tgroup !== '' &&\n\t\t\t\t\t\t\t\t\t\t\t<option name={group.title} key={group.title}>{group.title}</option>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t<button onClick={this.beginQuiz}>\n\t\t\t\t\t\t\t\tBegin Quiz\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</>\n\t\t\t\t\t}\n\n\t\t\t\t\t{ this.state.isQuiz &&\n\t\t\t\t\t\t<Quiz \n\t\t\t\t\t\t\tteam={this.state.selectedTeam.team}\n\t\t\t\t\t\t\tendCallback={this.endQuiz}\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}