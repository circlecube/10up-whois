{"version":3,"sources":["10up-logo.svg","components/PersonCard.js","components/Score.js","components/Quiz.js","components/Leaderboard.js","utils/API.js","utils/firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PersonCard","clickCard","props","clicked","onClick","person","index","correct","className","this","data-clicked","data-correct","src","image","alt","name","title","Component","Score","average","total","record","map","r","i","key","React","Quiz","state","questionID","questionIndex","questionAnswers","correctlyAnswered","score","startTime","Date","now","duration","teamName","startQuiz","setState","console","log","endQuiz","quiz","timestamp","avatar","endCallback","makeQuizQuestion","length","team","randomAnswerIndex","getUnansweredPerson","randomAnswerID","id","randomAnswerChoices","randomPeople","people","randomIndex","Math","floor","random","includes","randomUniqueNumbers","max","arr","initlength","indexOf","push","correctAnswer","randomIndexes","shuffle","array","temporaryValue","currentIndex","calculateScore","handleCardClick","newClicked","scorecorrect","scoretotal","scoreaverage","concat","setTimeout","bind","Leaderboard","records","colSpan","width","height","parseFloat","toFixed","scrapeTeam","a","axios","get","html","cheerio","load","data","$","each","elem","find","attr","text","replace","group","bio","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","App","isLoading","groups","selectedTeam","selectedName","selectedAvatar","logo","isQuiz","testing","lastQuiz","leaderboard","selectedLeaderboard","message","beginQuiz","cancelQuiz","addToLeaderboard","setGroups","Set","o","filter","sort","b","handleTeamChange","event","setSelectedTeam","target","value","teamLeaderboard","quizrecord","database","ref","joined","loadLeaderboard","orderByChild","on","snapshot","val","leaderboard_ar","Array","isArray","Object","keys","parseInt","class","href","viewBox","fill-rule","d","dangerouslySetInnerHTML","__html","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.60704b1a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/10up-logo.a5fccafa.svg\";","import React, { Component } from 'react'\n\nexport default class PersonCard extends Component {\n\n\tclickCard = () => {\n\t\tif ( !this.props.clicked ) {\n\t\t\tthis.props.onClick( this.props.person, this.props.index, this.props.correct );\n\t\t}\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<li\n\t\t\t\tclassName=\"person-card\"\n\t\t\t\tonClick={ this.clickCard }\n\t\t\t\tdata-clicked={ this.props.clicked }\n\t\t\t\tdata-correct={ this.props.correct }\n\t\t\t>\n\t\t\t\t<img \n\t\t\t\t\tsrc={ this.props.person.image } \n\t\t\t\t\talt={ this.props.person.name } \n\t\t\t\t/>\n\t\t\t\t<p className=\"detail\">\n\t\t\t\t\t<span className=\"person-name\">{ this.props.person.name }</span>\n\t\t\t\t\t<span className=\"person-title\">{ this.props.person.title }</span>\n\t\t\t\t</p>\n\t\t\t</li>\n\t\t)\n\t}\n}","import React from 'react'\n\nexport default class Score extends React.Component {\n\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"score\">\n\t\t\t\t<div className=\"label average\">\n\t\t\t\t\t{ this.props.average }\n\t\t\t\t</div>\n\t\t\t\t<div className=\"label total\">\n\t\t\t\t\t{ this.props.correct + ' / ' + this.props.total }\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\tthis.props.record.map( (r, i) => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"record\"\n\t\t\t\t\t\t\t\tdata-correct={r}\n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}","import React, { Component } from 'react'\nimport PersonCard from './PersonCard';\nimport Score from './Score';\n\nexport default class Quiz extends Component {\n\tstate = {\n\t\tquestionID: 0, // current correct answer - post id\n\t\tquestionIndex: 0, // current correct answer - post array index\n\t\tquestionAnswers: [], // current questions answers\n\t\tcorrectlyAnswered: [], // track correct answers\n\t\tscore: {\n\t\t\tcorrect: 0, // number correct\n\t\t\ttotal: 0, // out of total clicks\n\t\t\taverage: 0, // average score\n\t\t},\n\t\trecord: [], // keep track of every click - a boolean indicating the click was correct or incorrect.\n\t\tstartTime: Date.now(), // time quiz starts\n\t\tduration: 0, // quiz duration\n\t\tteamName: '', // name of selected team - quiz subject\n\t\tclicked: [false, false, false, false], // array to store clicked state of 4 question answers\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.startQuiz();\n\t\tthis.makeQuizQuestion();\n\t}\n\n\tstartQuiz = () => {\n\t\tthis.setState({\n\t\t\tstartTime: Date.now(),\n\t\t\tteamName: this.props.teamName,\n\t\t});\n\t\tconsole.log('starting quiz at', this.state.startTime);\n\t}\n\n\tendQuiz = () => {\n\t\tlet now = Date.now();\n\t\tthis.setState({\n\t\t\tduration: now - this.state.startTime,\n\t\t});\n\t\tlet quiz = {\n\t\t\tscore: this.state.score,\n\t\t\tteamName: this.state.teamName,\n\t\t\tduration: this.state.duration,\n\t\t\ttimestamp: now,\n\t\t\tname: 'TEST',\n\t\t\tavatar: 'TEST',\n\t\t};\n\t\tthis.props.endCallback( quiz );\n\t} \n\n\tmakeQuizQuestion = () => {\n\t\t// check if there are any unanswered left - if not signal quiz end \n\t\tif ( this.state.correctlyAnswered.length >= this.props.team.length ) {\n\t\t\tthis.endQuiz();\n\t\t\treturn;\n\t\t}\n\t\t// reset clicked\n\t\tthis.setState({\n\t\t\tclicked: [false, false, false, false],\n\t\t});\n\n\t\tconst randomAnswerIndex = this.getUnansweredPerson( this.props.team );\n\t\tconst randomAnswerID = this.props.team[randomAnswerIndex].id;\n\t\tconst randomAnswerChoices = this.randomPeople( this.props.team, randomAnswerIndex);\n\n\t\tthis.setState(() => ({\n\t\t\tquestionID: randomAnswerID,\n\t\t\tquestionIndex: randomAnswerIndex,\n\t\t\tquestionAnswers: randomAnswerChoices,\n\t\t}));\n\t\t// console.log( this.state );\n\t}\n\n\t/**\n\t * Get a new person for a quiz question\n\t */\n\tgetUnansweredPerson = (people) => {\n\t\tlet randomIndex = Math.floor(Math.random() * people.length);\n\n\t\t// check if randomIndex is already included in the correctlyAnswered array\n\t\tif ( !this.state.correctlyAnswered.includes(randomIndex) ){\n\t\t\t// unique found, return it\n\t\t\t// console.log( 'unique random found: ', randomIndex, this.state.correctlyAnswered);\n\t\t\treturn randomIndex;\n\t\t} else {\n\t\t\t// found duplicate, go again - recursively\n\t\t\treturn this.getUnansweredPerson(people);\n\t\t}\n\t}\n\n\t/**\n\t * Get multiple random numbers\n\t * max = highest possible number: (0 - max)\n\t * length = number of random numbers - returned as array\n\t * arr = initial array\n\t */\n\trandomUniqueNumbers = (max, length, arr = []) => {\n\t\tconst initlength = arr.length;\n\t\tlength += initlength;\n\t\twhile(arr.length < length){\n\t\t\tvar r = Math.floor(Math.random() * max);\n\t\t\t// ensure value is unique\n\t\t\twhile ( arr.includes(r) ) {\n\t\t\t\tr = Math.floor(Math.random() * max);\n\t\t\t}\n\t\t\tif(arr.indexOf(r) === -1) arr.push(r);\n\t\t}\n\t\treturn arr;\n\t}\n\n\trandomPeople = (team, correctAnswer) => {\n\t\tif ( team ) {\n\t\t\tlet randomIndexes = [correctAnswer];\n\t\t\tlet randomPeople = [];\n\t\t\trandomIndexes = this.randomUniqueNumbers(team.length, 3, randomIndexes);\n\t\t\t// three random people\n\t\t\trandomPeople.push(team[randomIndexes[0]]);\n\t\t\trandomPeople.push(team[randomIndexes[1]]);\n\t\t\trandomPeople.push(team[randomIndexes[2]]);\n\t\t\trandomPeople.push(team[randomIndexes[3]]);\n\t\t\t// retunr the shuffles answers\n\t\t\treturn this.shuffle(randomPeople);\n\t\t}\n\t}\n\n\tshuffle = (array) => {\n\t\tlet currentIndex = array.length;\n\t\tlet temporaryValue, randomIndex;\n\t  \n\t\t// While there remain elements to shuffle...\n\t\twhile (0 !== currentIndex) {\n\t  \n\t\t  // Pick a remaining element...\n\t\t  randomIndex = Math.floor(Math.random() * currentIndex);\n\t\t  currentIndex -= 1;\n\t  \n\t\t  // And swap it with the current element.\n\t\t  temporaryValue = array[currentIndex];\n\t\t  array[currentIndex] = array[randomIndex];\n\t\t  array[randomIndex] = temporaryValue;\n\t\t}  \n\t\treturn array;\n\t}\n\n\tcalculateScore = (correct,total) => {\n\t\treturn Math.floor( correct / total * 100 );\n\t}\n\n\thandleCardClick = (person, i, correct) => {\n\t\t// record click\n\t\tlet newClicked = [...this.state.clicked];\n\t\tnewClicked[i] = true;\n\t\tthis.setState({\n\t\t\tclicked: newClicked,\n\t\t});\n\n\t\t // increment correct - if correct\n\t\tlet scorecorrect = this.state.score.correct + correct;\n\t\t// increment total for every click\n\t\tlet scoretotal = this.state.score.total + 1;\n\t\t// calculate average\n\t\tlet scoreaverage = this.calculateScore(scorecorrect, scoretotal);\n\n\t\tthis.setState((state) => ({\n\t\t\tscore: {\n\t\t\t\tcorrect: scorecorrect,\n\t\t\t\ttotal: scoretotal, \n\t\t\t\taverage: scoreaverage\n\t\t\t},\n\t\t\trecord: state.record.concat( correct ),\n\t\t}));\n\n\t\tif ( correct ) {\n\t\t\tthis.setState((state) => ({\n\t\t\t\tcorrectlyAnswered: state.correctlyAnswered.concat( state.questionIndex ),\n\t\t\t}));\n\n\t\t\tsetTimeout(\n\t\t\t\tfunction() { \n\t\t\t\t\tthis.makeQuizQuestion();\n\t\t\t\t}.bind(this), \n\t\t\t\t500\n\t\t\t);\n\t\t}\n\t}\n\n\trender (){\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<p>\n\t\t\t\t\t{ this.state.questionAnswers && \n\t\t\t\t\t\t`Who is ${ this.props.team[this.state.questionIndex].name }?`\t\n\t\t\t\t\t}\n\t\t\t\t</p>\n\t\t\t\t<ul className=\"people-list -quiz\">\n\t\t\t\t{\n\t\t\t\t\tthis.state.questionAnswers.map( (person, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<PersonCard \n\t\t\t\t\t\t\t\tperson={ person }\n\t\t\t\t\t\t\t\tkey={ person.id }\n\t\t\t\t\t\t\t\tindex={ i }\n\t\t\t\t\t\t\t\tcorrect={ person.id === this.state.questionID }\n\t\t\t\t\t\t\t\tclicked={ this.state.clicked[i] }\n\t\t\t\t\t\t\t\tonClick={ this.handleCardClick }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t</ul>\n\n\t\t\t\t{/* <button onClick={this.makeQuizQuestion}>Skip</button> */}\n\n\t\t\t\t{ this.state.record.length > 0 &&\n\t\t\t\t\t<Score\n\t\t\t\t\t\trecord={this.state.record}\n\t\t\t\t\t\ttotal={this.state.score.total}\n\t\t\t\t\t\tcorrect={this.state.score.correct}\n\t\t\t\t\t\taverage={this.state.score.average}\n\t\t\t\t\t/>\n\t\t\t\t}\n\n\t\t\t</>\n\t\t)\n\t}\n}","import React from 'react'\n\nexport default class Leaderboard extends React.Component {\n\n\trender() {\n\t\treturn(\n\t\t\t<>\n\t\t\t\t{ this.props.records.length > 0 &&\n\t\t\t\t\t<table className=\"leaderboard\">\n\t\t\t\t\t\t<thead className=\"label\">\n\t\t\t\t\t\t\t<tr className=\"leaderboard-title\">\n\t\t\t\t\t\t\t\t<th colSpan=\"4\">{ this.props.title } for { this.props.teamName }</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t\t\t<th>Name</th>\n\t\t\t\t\t\t\t\t<th>Score</th>\n\t\t\t\t\t\t\t\t<th>Time</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.props.records.map( (r, i) => {\n\t\t\t\t\t\t\t\tif ( r.teamName === this.props.teamName ) {\n\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t\t<tr key={i}>\n\t\t\t\t\t\t\t\t\t\t<td><img src={r.avatar} width=\"50\" height=\"50\" alt={r.name} /></td>\n\t\t\t\t\t\t\t\t\t\t<td>{r.name}</td>\n\t\t\t\t\t\t\t\t\t\t<td>{r.score.average}</td>\n\t\t\t\t\t\t\t\t\t\t<td>{parseFloat(r.duration / 1000).toFixed(2)}s</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t}\n\t\t\t</>\n\t\t)\n\t}\n}","import axios from 'axios';\nimport cheerio from 'cheerio';\n\nexport default async function scrapeTeam() {\n\tconst html = await axios.get('https://cors-anywhere.herokuapp.com/https://10up.com/about/');\n\tconst $ = await cheerio.load(html.data);\n\tlet team = [];\n  \n\t$('#team .team-member').each((i, elem) => {\n\t\tteam.push({\n\t\t  image: $(elem).find('.avatar.photo').attr('data-src'),\n\t\t  name: $(elem).find('.meta h3').text().replace(/\\u00a0/g, \" \"),\n\t\t  title: $(elem).find('.meta p').text(),\n\t\t  group: $(elem).attr('class').replace('team-member team-', '').replace('team-member ', ''),\n\t\t  bio: $(elem).find('.employee-bio > p').text(),\n\t\t  id: i,\n\t\t})\n\t});\n  \n\t// console.log(team);\n\treturn team;\n  }","import firebase from 'firebase';\n\nvar firebaseConfig = {\n\tapiKey: \"AIzaSyCFNG-pU5Gg76H7ssYPKGSqBo_4aP-56WU\",\n\tauthDomain: \"upwhois.firebaseapp.com\",\n\tdatabaseURL: \"https://upwhois.firebaseio.com\",\n\tprojectId: \"upwhois\",\n\tstorageBucket: \"upwhois.appspot.com\",\n\tmessagingSenderId: \"406850437886\",\n\tappId: \"1:406850437886:web:5d83e5e5089899849e5baf\",\n\tmeasurementId: \"G-8M7VBFVV1L\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;","import React from 'react';\n\nimport Quiz from './components/Quiz';\nimport PersonCard from './components/PersonCard';\nimport Leaderboard from './components/Leaderboard';\nimport scrapeTeam from './utils/API';\nimport firebase from './utils/firebase';\nimport logo from './10up-logo.svg';\nimport './App.css';\n\n/**\n * TODO\n * Add options to quiz: \n * \t\tsubject: name, title, pod, \n * Add high scores:\n * \t\tset up google account authentication - 10up accounts only for user selection\n * Add analytics events to card clicks\n * \n */\nexport default class App extends React.Component {\n\tstate = {\n\t\tisLoading: true,\n\t\tteam: null,\n\t\tgroups: [],\n\t\tselectedTeam: null,\n\t\tselectedName: 'Anonymous',\n\t\tselectedAvatar: logo,\n\t\tisQuiz: false,\n\t\ttesting: true,\n\t\tlastQuiz: null,\n\t\tleaderboard: [],\n\t\tselectedLeaderboard: [],\n\t\tmessage: `\n<h2>Welcome!</h2>\n<p>Click yourself and then select a group for your quiz.</p>`,\n\t};\n\n\tbeginQuiz = () => {\n\t\tthis.setState({ \n\t\t\tisQuiz: true,\n\t\t\tmessage: null,\n\t\t});\n\t}\n\n\tcancelQuiz = () => {\n\t\tthis.setState({\n\t\t\tisQuiz: false,\n\t\t});\n\t}\n\n\tendQuiz = (quiz) => {\n\t\tthis.setState({ \n\t\t\tisQuiz: false,\n\t\t\tlastQuiz: quiz,\n\t\t});\n\n\t\t// if score is high enough\n\t\tif ( quiz.score.average === 100 ) {\n\t\t\t// save to leaderboard\n\t\t\tquiz.name = this.state.selectedName;\n\t\t\tquiz.avatar = this.state.selectedAvatar;\n\t\t\tthis.addToLeaderboard(quiz);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tmessage: `\n<h2>Congratulations! You finished the quiz!</h2>\n<h3>You scored ${quiz.score.average}% (${quiz.score.correct} of ${quiz.score.total}) in ${parseFloat(quiz.duration / 1000).toFixed(2)}s!</h3>\n<p>Try again or try a different quiz! You must score 100% to be added to the leaderboard!</p>`,\n\t\t});\n\n\t}\n\n\tsetGroups = (team) => {\n\t\t// parse unique group names\n\t\tlet groupnames = [...new Set(team.map(person => person.group))];\n\t\t// construct groups from names\n\t\tlet groups = groupnames.map(group => {\n\t\t\tlet o = {};\n\t\t\tif ( group === '') { // override for all\n\t\t\t\to.title = 'All';\n\t\t\t\to.team = team;\n\t\t\t} else {\n\t\t\t\to.title = group;\n\t\t\t\to.team = team.filter((person) => person.group === group );\n\t\t\t}\n\t\t\treturn o;\n\t\t});\n\t\tgroups.sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0)); \n\n\t\t// Create test group *van\n\t\tif( this.state.testing) {\n\t\tgroups.push({\n\t\t\ttitle: \"Test *van\",\n\t\t\tteam: team.filter((person) => person.name.includes(\"van\"))\n\t\t});\n\t}\n\t\t// console.log(groups);\n\t\tthis.setState({\n\t\t\tgroups: groups,\n\t\t\tselectedTeam: groups.find(o => o.title === 'All' ),\n\t\t});\n\t}\n\n\thandleCardClick = ( person, i, correct ) => {\n\t\t// set selected name and avatar\n\t\tthis.setState({\n\t\t\tselectedName: person.name,\n\t\t\tselectedAvatar: person.image,\n\t\t});\n\t\t// unclick all other cards\n\n\t}\n\n\thandleTeamChange = (event) => {\n\t\tthis.setSelectedTeam(event.target.value)\n\t}\n\n\tsetSelectedTeam = (teamName) => {\n\t\tlet teamLeaderboard = [];\n\t\tif ( this.state.leaderboard.length > 0 ) {\n\t\t\tteamLeaderboard = this.state.leaderboard.filter((record) => record.teamName === teamName );\n\t\t}\n\t\t// sort leaderboard records by score\n\t\tthis.setState({ \n\t\t\tselectedTeam: this.state.groups.find(o => o.title === teamName ),\n\t\t\tselectedLeaderboard: teamLeaderboard,\n\t\t});\n\t}\n\n\tasync componentDidMount() {\n\t\t// load async data\n\t\tlet team = await scrapeTeam();\n\n\t\t// set groups from team data\n\t\t// read team groups values and filter team into sub groups\n\t\t// create buttons for each group\n\t\tthis.setGroups(team);\n\n\t\t// update state with new data\n\t\tthis.setState({\n\t\t\tteam: team,\n\t\t});\n\n\t\tthis.loadLeaderboard();\n\t\t\n\t\t// render app\n\t\tthis.setState({\n\t\t\tisLoading: false,\n\t\t});\n\t}\n\n\tasync loadLeaderboard() {\n\t\t// load leaderboard from firebase\n\t\tconst fbLeaderboardRef = await firebase.database().ref('leaderboard').orderByChild('duration');\n\t\tfbLeaderboardRef.on('value', (snapshot) =>{\n\t\t\tlet leaderboard = snapshot.val();\n\t\t\tlet leaderboard_ar = [];\n\t\t\t\n\t\t\t// convert to array - firebase tends to return as object\n\t\t\tif ( !Array.isArray(leaderboard) ) {\n\t\t\t\tleaderboard_ar = Object.keys(leaderboard).map(function(key, i) {\n\t\t\t\t\treturn leaderboard[key];\n\t\t\t\t  });\n\t\t\t} else {\n\t\t\t\tleaderboard_ar = leaderboard;\n\t\t\t}\n\n\t\t\t//sort records by speed/duration\n\t\t\tleaderboard_ar.sort((a,b) => \n\t\t\t\t(parseInt(a.duration) > parseInt(b.duration)) ? 1 :\n\t\t\t\t((parseInt(b.duration) > parseInt(a.duration)) ? -1 :\n\t\t\t\t0)\n\t\t\t);\n\n\t\t\tthis.setState({\n\t\t\t\tleaderboard: leaderboard_ar,\n\t\t\t}, () => {\n\t\t\t\tthis.setSelectedTeam( this.state.selectedTeam.title);\n\t\t\t});\n\t\t});\n\t}\n\n\taddToLeaderboard = (quizrecord) => {\n\t\t// load leaderboard from firebase\n\t\tconst fbLeaderboardRef = firebase.database().ref('leaderboard');\n\t\tfbLeaderboardRef.push(quizrecord);\n\n\t\tvar joined = this.state.leaderboard.concat(quizrecord);\n\t\t\n\t\tthis.setState({\n\t\t\tleaderboard: joined,\n\t\t}, () => {\n\t\t\t// refresh with latest scores\n\t\t\tthis.loadLeaderboard();\n\t\t});\n\t}\n\n\trender() {\n\t\n\t\treturn (\n\t\t\t<div className=\"app\">\n\t\t\t\t<header className=\"header\">\n\t\t\t\t\t\n\t\t\t\t\t<img \n\t\t\t\t\t\tsrc={logo} \n\t\t\t\t\t\tclassName=\"logo\" \n\t\t\t\t\t\talt=\"Who is 10up\" \n\t\t\t\t\t\tonClick={ this.cancelQuiz }\n\t\t\t\t\t/>\n\t\t\t\t\t<a class=\"code-link\" href=\"https://github.com/circlecube/10up-whois\">\n\t\t\t\t\t\t<svg class=\"octicon octicon-mark-github v-align-middle\" height=\"32\" viewBox=\"0 0 16 16\" width=\"32\"><path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path></svg>\n\t\t\t\t\t</a>\n\n\t\t\t\t\t<div title=\"Current User\" className=\"current-user person-card\" data-clicked=\"true\" data-correct=\"true\">\n\t\t\t\t\t\t<img src={this.state.selectedAvatar} alt={this.state.selectedName}/>\n\t\t\t\t\t\t<p className=\"detail\">\n\t\t\t\t\t\t\t<span className=\"person-name\">{ this.state.selectedName }</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{ this.state.message &&\n\t\t\t\t\t\t<div className=\"message\" dangerouslySetInnerHTML={{__html: this.state.message}}></div>\n\t\t\t\t\t}\n\n\t\t\t\t\t{ this.state.isLoading && \n\t\t\t\t\t\t<p>Loading...</p>\n\t\t\t\t\t}\n\n\t\t\t\t\t{ this.state.team && !this.state.isQuiz && \t\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<p>Who are these people?</p>\n\t\t\t\t\t\t\t<ul className=\"people-list -mini\">\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.state.selectedTeam.team.map( person => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<PersonCard \n\t\t\t\t\t\t\t\t\t\t\tperson={ person }\n\t\t\t\t\t\t\t\t\t\t\tkey={ person.id }\n\t\t\t\t\t\t\t\t\t\t\tclicked={ person.name === this.state.selectedName }\n\t\t\t\t\t\t\t\t\t\t\tcorrect={ true }\n\t\t\t\t\t\t\t\t\t\t\tonClick={ this.handleCardClick }\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t\t\t<select \n\t\t\t\t\t\t\t\tvalue={this.state.selectedTeam.title}\n\t\t\t\t\t\t\t\tonChange={this.handleTeamChange}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.state.groups.map( group => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\tgroup !== '' &&\n\t\t\t\t\t\t\t\t\t\t\t<option name={group.title} key={group.title}>{group.title}</option>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t<button onClick={this.beginQuiz}>\n\t\t\t\t\t\t\t\tBegin Quiz\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t{ this.state.leaderboard && this.state.leaderboard.length > 0 &&\n\t\t\t\t\t\t\t\t<Leaderboard\n\t\t\t\t\t\t\t\t\ttitle=\"High Scores\"\n\t\t\t\t\t\t\t\t\trecords={this.state.selectedLeaderboard}\n\t\t\t\t\t\t\t\t\tteamName={this.state.selectedTeam.title}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</>\n\t\t\t\t\t}\n\n\t\t\t\t\t{ this.state.isQuiz &&\n\t\t\t\t\t\t<Quiz \n\t\t\t\t\t\t\tteamName={this.state.selectedTeam.title}\n\t\t\t\t\t\t\tteam={this.state.selectedTeam.team}\n\t\t\t\t\t\t\tendCallback={this.endQuiz}\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}